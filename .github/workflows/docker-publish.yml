name: Docker Build and Publish

# TODO: automate when base image updates: https://github.com/mthalman/docker-bump-action
# https://github.com/peaceiris/actions-gh-pages
on:
  schedule:
    # Every 2 weeks
    - cron: '37 7 1,15 * *'
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**/README.md'
      - 'LICENSE'
      - '.vscode/**'
  workflow_dispatch:

env:
  ## github.repository as <account>/<repo>
  #IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME_PREFIX: ${{ github.actor }}/caddy

# only allow one action at a time
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Generate matrix from Dockerfile list
        id: set-matrix
        run: |
          # Iterate over all files matching the 'Dockerfile.*' pattern.
          # For each file, the 'variant' is extracted by removing the 'Dockerfile.' prefix.
          # The rest of the command uses jq to safely build the JSON array.
          json_array=$(for file in docker/Dockerfile.*; do
            variant="${file#*.}"
            jq -n --arg dockerfile "$file" --arg variant "$variant" '{"dockerfile":$dockerfile, "variant":$variant}'
          done | jq -s -c .)

          echo "Generated JSON: $json_array"
          echo "matrix=$json_array" >> "$GITHUB_OUTPUT"


  ## define job to build and publish docker image
  build-and-push-image:
    name: Build Docker image and push to Github Container Registry
    needs: setup-matrix
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        include: ${{ fromJSON(needs.setup-matrix.outputs.matrix) }}
    continue-on-error: true
    steps:
      ## https://github.com/actions/checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      ## https://github.com/docker/build-push-action
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      ## https://github.com/docker/login-action
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ## https://github.com/docker/metadata-action
      # - name: Extract Docker metadata
      #   id: meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: docker.io/caddy
      #     tags: |
      #       type=semver,pattern={{version}}
      #       type=semver,pattern={{major}}.{{minor}}
      #       type=semver,pattern={{major}}
      #     flavor: |
      #       latest=true
  
      ## https://github.com/docker/build-push-action
      - name: Build and push Docker image ${{ env.IMAGE_NAME_PREFIX }}-${{ matrix.variant }}
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          provenance: false
          context: .
          #platforms: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8
          platforms: linux/amd64, linux/arm64/v8
          push: ${{ github.event_name != 'pull_request' }}
          # tags: ${{ steps.meta.outputs.tags }}
          # labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ghcr.io/${{ env.IMAGE_NAME_PREFIX }}-${{ matrix.variant }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file:  ${{ matrix.dockerfile }}

      - name: Image digest
        run: echo ${{ steps.build-and-push.outputs.digest }}

  log-run-timestamp:
    needs: build-and-push-image
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Create timestamp file and push to runs branch
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git checkout --orphan runs
          git rm -rf .
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC')" > last-run.txt
          git add last-run.txt
          git commit -m "Run: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          git push -f origin runs
